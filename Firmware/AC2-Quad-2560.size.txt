00000001 b wp_control
00000001 b fast_corner
00000001 b home_is_set
00000001 b in_failsafe
00000001 b motor_light
00000001 b yaw_stopped
00000001 b CH7_toy_flag
00000001 b CH7_wp_index
00000001 b control_mode
00000001 b gps_watchdog
00000001 d yaw_tracking
00000001 d land_complete
00000001 b throttle_mode
00000001 b mavlink_active
00000001 b prev_nav_index
00000001 b wp_verify_byte
00000001 b alt_change_flag
00000001 b alt_sensor_flag
00000001 b command_yaw_dir
00000001 b failsafeCounter
00000001 b loiter_override
00000001 b new_radio_frame
00000001 b roll_pitch_mode
00000001 b rtl_reached_alt
00000001 b counter_one_herz
00000001 d failsafe_enabled
00000001 b in_mavlink_delay
00000001 b slow_loopCounter
00000001 b takeoff_complete
00000001 b oldSwitchPosition
00000001 b command_cond_index
00000001 b medium_loopCounter
00000001 b rate_targets_frame
00000001 b command_yaw_relative
00000001 b copter_leds_GPS_blink
00000001 b copter_leds_nav_blink
00000001 b auto_disarming_counter
00000001 b reset_throttle_counter
00000001 b copter_leds_motor_blink
00000001 b nav_ok
00000001 b do_flip
00000001 b slow_wp
00000001 b CH7_flag
00000001 b event_id
00000001 b failsafe
00000001 b flip_dir
00000001 b led_mode
00000001 b yaw_mode
00000001 b GPS_light
00000001 b do_simple
00000001 b yaw_timer
00000001 b update_simple_mode()::simple_counter
00000001 b loop::run_50hz_loop
00000001 d update_GPS()::ground_start_count
00000001 b get_of_roll(long)::log_counter
00000001 b get_of_pitch(long)::log_counter
00000001 b get_rate_yaw(long)::log_counter
00000001 b dancing_light()::step
00000001 b get_rate_roll(long)::log_counter
00000001 b get_rate_pitch(long)::log_counter
00000001 b init_arm_motors()::did_ground_start
00000001 b get_stabilize_yaw(long)::log_counter
00000001 b get_throttle_rate(int)::log_counter
00000001 b read_control_switch()::switch_debouncer
00000001 d do_jump()::jump
00000001 B flip_state
00000001 B flip_timer
00000001 B isr_registry
00000001 B lim_old_state
00000001 B lim_state
00000001 B param_loader
00000001 B relay
00000002 T userhook_50Hz()
00000002 T userhook_init()
00000002 b climb_rate
00000002 b loiter_sum
00000002 b sonar_rate
00000002 b angle_boost
00000002 b event_delay
00000002 b event_value
00000002 b control_roll
00000002 b event_repeat
00000002 b loiter_total
00000002 b nav_throttle
00000002 b x_rate_error
00000002 b y_rate_error
00000002 b control_pitch
00000002 b gps_fix_count
00000002 b landing_boost
00000002 b mainLoop_count
00000002 b x_actual_speed
00000002 b y_actual_speed
00000002 b ground_detector
00000002 b loiter_time_max
00000002 b waypoint_radius
00000002 b climb_rate_error
00000002 b command_yaw_time
00000002 b crosstrack_error
00000002 b event_undo_value
00000002 b perf_mon_counter
00000002 b climb_rate_actual
00000002 b command_nav_index
00000002 b command_yaw_speed
00000002 b auto_level_counter
00000002 b saved_toy_throttle
00000002 b waypoint_speed_gov
00000002 b superslow_loopCounter
00000002 b failsafe_last_mainLoop_count
00000002 b g_gps
00000002 b nav_lat
00000002 b nav_lon
00000002 b baro_rate
00000002 b sonar_alt
00000002 W Filter<float>::reset()
00000002 W Filter<int>::reset()
00000002 W Filter<long>::reset()
00000002 W AP_AHRS::init(AP_PeriodicProcess*)
00000002 r print_latlon(BetterStream*, long)::__c
00000002 b arm_motors()::arming_counter
00000002 r setup_frame(unsigned char, Menu::arg const*)::__c
00000002 r setup_frame(unsigned char, Menu::arg const*)::__c
00000002 r setup_frame(unsigned char, Menu::arg const*)::__c
00000002 r setup_frame(unsigned char, Menu::arg const*)::__c
00000002 r Log_Read_Raw()::__c
00000002 r print_divider()::__c
00000002 b update_altitude()::old_sonar_alt
00000002 r Log_Read_Process(int, int)::__c
00000002 r setup_accel_scale(unsigned char, Menu::arg const*)::__c
00000002 r setup_accel_scale(unsigned char, Menu::arg const*)::__c
00000002 r setup_accel_scale(unsigned char, Menu::arg const*)::__c
00000002 b update_optical_flow()::log_counter
00000002 r test_wp(unsigned char, Menu::arg const*)::__c
00000002 r test_gps(unsigned char, Menu::arg const*)::__c
00000002 r test_ins(unsigned char, Menu::arg const*)::__c
00000002 B adc
00000002 B timer_scheduler
00000002 B xLeadFilter
00000002 B yLeadFilter
00000003 r select_logs(unsigned char, Menu::arg const*)::__c
00000003 r setup_sonar(unsigned char, Menu::arg const*)::__c
00000003 r Log_Read_GPS()::__c
00000003 r Log_Read_Raw()::__c
00000003 r print_enabled(unsigned char)::__c
00000003 r setup_compass(unsigned char, Menu::arg const*)::__c
00000003 r setup_optflow(unsigned char, Menu::arg const*)::__c
00000003 r test_ins(unsigned char, Menu::arg const*)::__c
00000004 b auto_pitch
00000004 d cos_roll_x
00000004 b long_error
00000004 d cos_pitch_x
00000004 b event_timer
00000004 b loiter_time
00000004 d scaleLongUp
00000004 b circle_angle
00000004 b loiter_timer
00000004 b current_amps1
00000004 b home_distance
00000004 b last_gps_time
00000004 b nav_loopTimer
00000004 d scaleLongDown
00000004 b altitude_error
00000004 b current_total1
00000004 b fast_loopTimer
00000004 b target_bearing
00000004 b command_yaw_end
00000004 b condition_start
00000004 b condition_value
00000004 d battery_voltage1
00000004 b command_yaw_delta
00000004 b command_yaw_start
00000004 b fiftyhz_loopTimer
00000004 b old_target_bearing
00000004 b yaw_rate_target_bf
00000004 b yaw_rate_target_ef
00000004 b roll_rate_target_bf
00000004 b roll_rate_target_ef
00000004 b throttle_integrator
00000004 b pitch_rate_target_bf
00000004 b pitch_rate_target_ef
00000004 r __menu_name__log_menu
00000004 b command_yaw_start_time
00000004 b home_to_copter_bearing
00000004 b initial_simple_bearing
00000004 b failsafe_last_timestamp
00000004 b original_target_bearing
00000004 d G_Dt
00000004 b dTnav
00000004 b nav_yaw
00000004 b of_roll
00000004 b auto_yaw
00000004 b baro_alt
00000004 b nav_roll
00000004 b of_pitch
00000004 b sin_roll
00000004 b auto_roll
00000004 d cos_yaw_x
00000004 b lat_error
00000004 b nav_pitch
00000004 b sin_pitch
00000004 b sin_yaw_y
00000004 W FilterWithBuffer<float, (unsigned char)7>::get_filter_size()
00000004 W FilterWithBuffer<int, (unsigned char)5>::get_filter_size()
00000004 W FilterWithBuffer<long, (unsigned char)3>::get_filter_size()
00000004 W FilterWithBuffer<long, (unsigned char)4>::get_filter_size()
00000004 W FilterWithBuffer<long, (unsigned char)5>::get_filter_size()
00000004 W Filter<int>::apply(int)
00000004 b update_simple_mode()::simple_cos_x
00000004 b update_simple_mode()::simple_sin_y
00000004 b update_throttle_mode()::throttle_avg
00000004 b get_of_roll(long)::last_of_roll_update
00000004 b get_of_roll(long)::tot_x_cm
00000004 r select_logs(unsigned char, Menu::arg const*)::__c
00000004 r select_logs(unsigned char, Menu::arg const*)::__c
00000004 r select_logs(unsigned char, Menu::arg const*)::__c
00000004 r select_logs(unsigned char, Menu::arg const*)::__c
00000004 r select_logs(unsigned char, Menu::arg const*)::__c
00000004 r select_logs(unsigned char, Menu::arg const*)::__c
00000004 r setup_sonar(unsigned char, Menu::arg const*)::__c
00000004 b get_of_pitch(long)::last_of_pitch_update
00000004 b get_of_pitch(long)::tot_y_cm
00000004 r print_switch(unsigned char, unsigned char, bool)::__c
00000004 b get_rate_roll(long)::last_rate
00000004 b mavlink_delay(unsigned long)::last_5s
00000004 b mavlink_delay(unsigned long)::last_1hz
00000004 b mavlink_delay(unsigned long)::last_50hz
00000004 r print_enabled(unsigned char)::__c
00000004 r setup_compass(unsigned char, Menu::arg const*)::__c
00000004 r setup_optflow(unsigned char, Menu::arg const*)::__c
00000004 b get_rate_pitch(long)::last_rate
00000004 r print_log_menu()::__c
00000004 b update_altitude()::old_baro_alt
00000004 b calc_XY_velocity()::last_latitude
00000004 b calc_XY_velocity()::last_longitude
00000004 r print_flight_mode(unsigned char)::__c
00000004 r print_flight_mode(unsigned char)::__c
00000004 r setup_batt_monitor(unsigned char, Menu::arg const*)::__c
00000004 r Log_Read_Nav_Tuning()::__c
00000004 b update_optical_flow()::last_of_update
00000004 r Log_Read_Control_Tuning()::__c
00000004 r dump_log(unsigned char, Menu::arg const*)::__c
00000004 B float_int
00000004 B pitch_axis
00000004 B pitch_scale_d
00000004 B roll_axis
00000004 B roll_scale_d
00000004 B tuning_value
00000004 B wp_distance
00000005 r __menu_name__test_menu
00000005 r report_imu()::__c
00000005 r select_logs(unsigned char, Menu::arg const*)::__c
00000005 r select_logs(unsigned char, Menu::arg const*)::__c
00000005 r select_logs(unsigned char, Menu::arg const*)::__c
00000005 r Log_Read_Raw()::__c
00000005 r print_switch(unsigned char, unsigned char, bool)::__c
00000005 r Log_Read_Mode()::__c
00000005 r Log_Read_Iterm()::__c
00000005 r print_log_menu()::__c
00000005 r print_log_menu()::__c
00000005 r print_log_menu()::__c
00000005 r print_log_menu()::__c
00000005 r print_log_menu()::__c
00000005 r print_flight_mode(unsigned char)::__c
00000005 r print_flight_mode(unsigned char)::__c
00000005 r print_flight_mode(unsigned char)::__c
00000005 r setup_accel_scale(unsigned char, Menu::arg const*)::__c
00000005 r Log_Read_Nav_Tuning()::__c
00000005 r Log_Read_Control_Tuning()::__c
00000005 r dump_log(unsigned char, Menu::arg const*)::__c
00000006 T failsafe_disable()
00000006 t send_limits_status(mavlink_channel_t)
00000006 r __menu_name__setup_menu
00000006 W Filter<long>::apply(long)
00000006 V vtable for AP_AnalogSource
00000006 r select_logs(unsigned char, Menu::arg const*)::__c
00000006 r test_eedump(unsigned char, Menu::arg const*)::__c
00000006 r test_eedump(unsigned char, Menu::arg const*)::__c
00000006 r zero_eeprom()::__c
00000006 r Log_Read_Mode()::__c
00000006 r print_log_menu()::__c
00000006 r print_log_menu()::__c
00000006 r load_parameters()::__c
00000006 r print_flight_mode(unsigned char)::__c
00000006 r print_flight_mode(unsigned char)::__c
00000006 r report_batt_monitor()::__c
00000006 r test_gps(unsigned char, Menu::arg const*)::__c
00000007 b setup_menu
00000007 b planner_menu
00000007 b log_menu
00000007 b main_menu
00000007 b test_menu
00000007 b board_voltage()::vcc
00000007 r select_logs(unsigned char, Menu::arg const*)::__c
00000007 r select_logs(unsigned char, Menu::arg const*)::__c
00000007 b read_battery()::batt_curr_pin
00000007 b read_battery()::batt_volt_pin
00000007 r report_frame()::__c
00000007 r report_radio()::__c
00000007 r report_sonar()::__c
00000007 r print_enabled(unsigned char)::__c
00000007 r print_log_menu()::__c
00000007 r print_flight_mode(unsigned char)::__c
00000007 r print_flight_mode(unsigned char)::__c
00000007 r print_flight_mode(unsigned char)::__c
00000007 r Log_Read_Nav_Tuning()::__c
00000007 r Log_Read_Control_Tuning()::__c
00000007 r test_wp(unsigned char, Menu::arg const*)::__c
00000007 r Log_Read(int, int)::__c
00000007 r test_gps(unsigned char, Menu::arg const*)::__c
00000007 r test_ins(unsigned char, Menu::arg const*)::__c
00000007 r test_ins(unsigned char, Menu::arg const*)::__c
00000008 b guard variable for board_voltage()::vcc
00000008 b guard variable for read_battery()::batt_curr_pin
00000008 b guard variable for read_battery()::batt_volt_pin
00000008 t setup_erase(unsigned char, Menu::arg const*)
00000008 r __menu_name__planner_menu
00000008 W Filter<float>::apply(float)
00000008 V vtable for Filter<float>
00000008 V vtable for Filter<int>
00000008 V vtable for Filter<long>
00000008 r print_done()::__c
00000008 r select_logs(unsigned char, Menu::arg const*)::__c
00000008 r report_frame()::__c
00000008 r report_frame()::__c
00000008 r report_frame()::__c
00000008 r report_tuning()::__c
00000008 r Log_Read_Iterm()::__c
00000008 r print_log_menu()::__c
00000008 r test_wp(unsigned char, Menu::arg const*)::__c
00000009 r report_optflow()::__c
00000009 r limits_loop()::__c
00000009 r print_switch(unsigned char, unsigned char, bool)::__c
00000009 r print_log_menu()::__c
00000009 r print_log_menu()::__c
00000009 r report_compass()::__c
00000009 r print_flight_mode(unsigned char)::__c
00000009 r print_flight_mode(unsigned char)::__c
00000009 B sonar_analog_source
00000009 B spi3_semaphore
00000009 B spi_semaphore
0000000a T piezo_on()
0000000a T piezo_off()
0000000a t copter_leds_GPS_on()
0000000a V vtable for ModeFilter<int, (unsigned char)5>
0000000a V vtable for AverageFilter<long, float, (unsigned char)3>
0000000a V vtable for AverageFilter<long, float, (unsigned char)4>
0000000a V vtable for AverageFilter<long, float, (unsigned char)5>
0000000a V vtable for FilterWithBuffer<float, (unsigned char)7>
0000000a V vtable for FilterWithBuffer<int, (unsigned char)5>
0000000a V vtable for FilterWithBuffer<long, (unsigned char)3>
0000000a V vtable for FilterWithBuffer<long, (unsigned char)4>
0000000a V vtable for FilterWithBuffer<long, (unsigned char)5>
0000000a r print_latlon(BetterStream*, long)::__c
0000000a r test_relay(unsigned char, Menu::arg const*)::__c
0000000a r limits_loop()::__c
0000000a r limits_loop()::__c
0000000a r test_battery(unsigned char, Menu::arg const*)::__c
0000000a r test_optflow(unsigned char, Menu::arg const*)::__c
0000000a r print_log_menu()::__c
0000000a r Log_Read_Startup()::__c
0000000a r print_flight_mode(unsigned char)::__c
0000000a r print_flight_mode(unsigned char)::__c
0000000a r test_wp(unsigned char, Menu::arg const*)::__c
0000000a r test_ins(unsigned char, Menu::arg const*)::__c
0000000a r test_mag(unsigned char, Menu::arg const*)::__c
0000000a T setup
0000000b r test_relay(unsigned char, Menu::arg const*)::__c
0000000b r test_wp_nav(unsigned char, Menu::arg const*)::__c
0000000b r wait_for_yes()::__c
0000000b r print_log_menu()::__c
0000000b r throttle_failsafe(unsigned int)::__c
0000000b r test_ins(unsigned char, Menu::arg const*)::__c
0000000b B gpslock_limit
0000000c t process_logs(unsigned char, Menu::arg const*)
0000000c b omega
0000000c t test_mode(unsigned char, Menu::arg const*)
0000000c T GCS_MAVLINK::send_text(gcs_severity, char const*)
0000000c r print_switch(unsigned char, unsigned char, bool)::__c
0000000c r report_frame()::__c
0000000c r test_optflow(unsigned char, Menu::arg const*)::__c
0000000c r setup_factory(unsigned char, Menu::arg const*)::__c
0000000c r report_version()::__c
0000000c r setup_accel_scale(unsigned char, Menu::arg const*)::__c
0000000c r throttle_failsafe(unsigned int)::__c
0000000c r report_batt_monitor()::__c
0000000c r test_mag(unsigned char, Menu::arg const*)::__c
0000000d r select_logs(unsigned char, Menu::arg const*)::__c
0000000d r setup_frame(unsigned char, Menu::arg const*)::__c
0000000d r test_tuning(unsigned char, Menu::arg const*)::__c
0000000d r init_ardupilot()::__c
0000000d r startup_ground()::__c
0000000d r dump_log(unsigned char, Menu::arg const*)::__c
0000000e t global destructors keyed to Serial
0000000e t global constructors keyed to Serial
0000000e t send_statustext(mavlink_channel_t)
0000000e V vtable for DerivativeFilter<float, (unsigned char)7>
0000000e r setup_mode(unsigned char, Menu::arg const*)::__c
0000000e r test_sonar(unsigned char, Menu::arg const*)::__c
0000000e r select_logs(unsigned char, Menu::arg const*)::__c
0000000e r do_erase_logs()::__c
0000000e r setup_compass(unsigned char, Menu::arg const*)::__c
0000000e r print_log_menu()::__c
0000000e r print_radio_values()::__c
0000000e r print_radio_values()::__c
0000000e r print_radio_values()::__c
0000000e r print_radio_values()::__c
0000000e r print_radio_values()::__c
0000000e r print_radio_values()::__c
0000000e r print_radio_values()::__c
0000000e r setup_batt_monitor(unsigned char, Menu::arg const*)::__c
0000000e r report_batt_monitor()::__c
0000000e r report_flight_modes()::__c
0000000e r test_wp(unsigned char, Menu::arg const*)::__c
0000000f b current_loc
0000000f b filtered_loc
0000000f b command_nav_queue
0000000f b command_cond_queue
0000000f b home
0000000f b next_WP
0000000f b prev_WP
0000000f b circle_WP
0000000f b guided_WP
0000000f b target_WP
0000000f r setup_radio(unsigned char, Menu::arg const*)::__c
0000000f r Log_Read_GPS()::__c
0000000f r Log_Read_Data()::__c
0000000f r setup_optflow(unsigned char, Menu::arg const*)::__c
0000000f r init_ardupilot()::__c
0000000f r print_log_menu()::__c
0000000f r print_log_menu()::__c
0000000f r setup_accel_scale(unsigned char, Menu::arg const*)::__c
0000000f B sonar_mode_filter
00000010 r planner_menu_commands
00000010 T GCS_MAVLINK::send_message(ap_message)
00000010 V vtable for AP_Baro
00000010 r test_sonar(unsigned char, Menu::arg const*)::__c
00000010 r report_compass()::__c
00000010 r dump_log(unsigned char, Menu::arg const*)::__c
00000010 r test_ins(unsigned char, Menu::arg const*)::__c
00000010 r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
00000010 r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
00000010 B pitch_rate_d_filter
00000010 B roll_rate_d_filter
00000011 r zero_eeprom()::__c
00000011 r Log_Read_Data()::__c
00000012 B APM_RC
00000012 t erase_logs(unsigned char, Menu::arg const*)
00000012 t reset_throttle_I()
00000012 r __menu_name__main_menu
00000012 r select_logs(unsigned char, Menu::arg const*)::__c
00000013 r limits_loop()::__c
00000013 r init_compass()::__c
00000013 r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
00000013 B altitude_limit
00000014 T GCS_MAVLINK::GCS_MAVLINK()
00000014 T GCS_MAVLINK::GCS_MAVLINK()
00000014 V vtable for AP_AHRS
00000014 r limits_loop()::__c
00000014 r setup_sonar(unsigned char, Menu::arg const*)::__c
00000014 r do_erase_logs()::__c
00000014 r mavlink_delay(unsigned long)::__c
00000014 r verify_nav_wp()::__c
00000014 r Log_Read_Performance()::__c
00000015 r Log_Read_Motors()::__c
00000015 r load_parameters()::__c
00000015 r print_hit_enter()::__c
00000015 r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
00000015 r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
00000016 T piezo_beep()
00000016 r setup_mode(unsigned char, Menu::arg const*)::__c
00000016 r limits_loop()::__c
00000016 r init_ardupilot()::__c
00000016 r init_ardupilot()::__c
00000016 t mav_array_memcpy
00000018 t setup_tune(unsigned char, Menu::arg const*)
00000018 r test_gps(unsigned char, Menu::arg const*)::__c
00000018 B baro_filter
00000018 B sonar
00000019 r Log_Read_GPS()::__c
00000019 r init_optflow()::__c
0000001a B DataFlash
0000001a T flash_leds(bool)
0000001a T output_min()
0000001a t gcs_update()
0000001a t gcs_data_stream_send()
0000001a W FilterWithBuffer<int, (unsigned char)5>::reset()
0000001a V vtable for DataFlash_Class
0000001a r test_logging(unsigned char, Menu::arg const*)::__c
0000001b r test_logging(unsigned char, Menu::arg const*)::__c
0000001c T failsafe_enable()
0000001c t reset_stability_I()
0000001c r limits_loop()::__c
0000001c r limits_loop()::__c
0000001c r test_logging(unsigned char, Menu::arg const*)::__c
0000001c r report_tuning()::__c
0000001c r Log_Read_Process(int, int)::__c
0000001c r print_gyro_offsets()::__c
0000001c r print_accel_offsets()::__c
0000001d B Serial
0000001d B Serial1
0000001d B Serial3
0000001d r Log_Read_DMP()::__c
0000001d r report_compass()::__c
0000001d r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
0000001e W FilterWithBuffer<long, (unsigned char)3>::reset()
0000001f r limits_loop()::__c
0000001f r limits_loop()::__c
0000001f r test_battery(unsigned char, Menu::arg const*)::__c
0000001f r init_ardupilot()::__c
0000001f r init_barometer()::__c
0000001f r print_log_menu()::__c
0000001f r test_mag(unsigned char, Menu::arg const*)::__c
00000020 W AverageFilter<long, float, (unsigned char)3>::reset()
00000020 r arm_motors()::__c
00000020 r limits_loop()::__c
00000020 r limits_loop()::__c
00000021 r setup_mode(unsigned char, Menu::arg const*)::__c
00000021 r limits_loop()::__c
00000021 r limits_loop()::__c
00000021 r Log_Read_Current()::__c
00000021 r Log_Read_Attitude()::__c
00000021 r Log_Read(int, int)::__c
00000022 t clear_leds()
00000022 t print_blanks(int)
00000022 r arm_motors()::__c
00000022 r limits_loop()::__c
00000023 r test_optflow(unsigned char, Menu::arg const*)::__c
00000024 t reset_rate_I()
00000024 W FilterWithBuffer<float, (unsigned char)7>::reset()
00000024 r load_parameters()::__c
00000024 r dump_log(unsigned char, Menu::arg const*)::__c
00000025 r report_sonar()::__c
00000026 t print_done()
00000026 t do_erase_logs()
00000026 t print_hit_enter()
00000026 t Log_Read_Startup()
00000026 W FilterWithBuffer<long, (unsigned char)4>::reset()
00000026 r limits_loop()::__c
00000026 r print_wp(Location*, unsigned char)::__c
00000027 r test_logging(unsigned char, Menu::arg const*)::__c
00000027 B limits
00000028 t init_commands()
00000028 t print_enabled(unsigned char)
00000028 t main_menu_help(unsigned char, Menu::arg const*)
00000028 t gcs_send_message(ap_message)
00000028 W AverageFilter<long, float, (unsigned char)4>::reset()
00000028 r Log_Read_Cmd()::__c
00000028 r Log_Read_PID()::__c
00000028 r init_ardupilot()::__c
0000002a T update_toy_throttle()
0000002a t print_divider()
0000002a t setup_declination(unsigned char, Menu::arg const*)
0000002b r planner_mode(unsigned char, Menu::arg const*)::__c
0000002c T set_yaw_rate_target(long, unsigned char)
0000002c T set_roll_rate_target(long, unsigned char)
0000002c T set_pitch_rate_target(long, unsigned char)
0000002c t init_barometer()
0000002c t init_disarm_motors()
0000002e W FilterWithBuffer<int, (unsigned char)5>::apply(int)
0000002e W FilterWithBuffer<long, (unsigned char)5>::reset()
0000002f r test_radio(unsigned char, Menu::arg const*)::__c
0000002f r init_rc_out()::__c
0000002f r setup_range(unsigned char, Menu::arg const*)::__c
0000002f r setup_factory(unsigned char, Menu::arg const*)::__c
00000030 t planner_mode(unsigned char, Menu::arg const*)
00000030 t do_land()
00000030 W AverageFilter<long, float, (unsigned char)5>::reset()
00000030 r setup_radio(unsigned char, Menu::arg const*)::__c
00000030 r Log_Read_Optflow()::__c
00000030 t mavlink_msg_mission_ack_send
00000032 T init_flip()
00000033 b pending_status
00000033 r limits_loop()::__c
00000033 r test_battery(unsigned char, Menu::arg const*)::__c
00000033 r test_logging(unsigned char, Menu::arg const*)::__c
00000034 t setup_show(unsigned char, Menu::arg const*)
00000035 r test_radio_pwm(unsigned char, Menu::arg const*)::__c
00000036 t report_radio()
00000036 t read_barometer()
00000036 t gcs_send_text_P(gcs_severity, prog_char_t const*)
00000036 W AP_Motors::output()
00000038 t send_current_waypoint(mavlink_channel_t)
00000038 t mavlink_msg_statustext_send
0000003a T report_optflow()
0000003a t report_imu()
0000003a T GCS_MAVLINK::init(FastSerial*)
0000003b r init_rc_out()::__c
0000003b B imu
0000003c t reset_wind_I()
0000003c t send_meminfo(mavlink_channel_t)
0000003c t send_hwstatus(mavlink_channel_t)
0000003c W FilterWithBuffer<long, (unsigned char)3>::apply(long)
0000003c W FilterWithBuffer<long, (unsigned char)4>::apply(long)
0000003c W FilterWithBuffer<long, (unsigned char)5>::apply(long)
0000003e t exit_mission()
0000003e T GCS_MAVLINK::send_text(gcs_severity, prog_char_t const*)
00000040 t startup_ground()
00000040 r log_menu_commands
00000042 t init_compass()
00000042 t copter_leds_GPS_slow_blink()
00000042 t do_jump()
00000044 r setup_flightmodes(unsigned char, Menu::arg const*)::__c
00000048 t copter_leds_slow_blink()
0000004a t find_next_nav_index(int)
0000004b r test_baro(unsigned char, Menu::arg const*)::__c
0000004c t report_version()
0000004d B gcs0
0000004d B gcs3
0000004d B geofence_limit
00000050 r main_menu_commands
00000052 t copter_leds_on()
00000052 t copter_leds_off()
00000052 T GCS_MAVLINK::stream_trigger(GCS_MAVLINK::streams)
00000054 T board_voltage()
00000054 t reset_I_all()
00000054 W FilterWithBuffer<float, (unsigned char)7>::apply(float)
00000055 r main_menu_help(unsigned char, Menu::arg const*)::__c
00000056 T run_rate_controllers()
00000056 t readSwitch()
00000056 t wait_for_yes()
00000056 t dancing_light()
00000056 T GCS_MAVLINK::_count_parameters()
0000005a t setup_motors(unsigned char, Menu::arg const*)
0000005a T GCS_MAVLINK::queued_waypoint_send()
0000005c B g_gps_driver
0000005e t read_control_switch()
00000060 t setup_accel(unsigned char, Menu::arg const*)
00000060 b mavlink_queue
00000060 B ins
00000060 B optflow
00000062 t Log_Write_Data(signed char, long)
00000062 t update_auto_yaw()
00000068 t setup_range(unsigned char, Menu::arg const*)
00000068 t zero_eeprom()
00000068 t change_command(unsigned char)
0000006b B camera_mount
0000006c t set_new_altitude(long)
0000006e t report_flight_modes()
00000070 t planner_gcs(unsigned char, Menu::arg const*)
00000072 t setup_optflow(unsigned char, Menu::arg const*)
00000074 t update_GPS_light()
00000074 t mavlink_msg_param_value_send
00000078 t setup_batt_monitor(unsigned char, Menu::arg const*)
0000007a T mavlink_send_text(mavlink_channel_t, gcs_severity, char const*)
0000007a t setup_factory(unsigned char, Menu::arg const*)
0000007c t set_failsafe(unsigned char)
0000007c t check_missed_wp()
0000007e t Log_Write_Data(signed char, float)
00000080 t gcs_send_text_fmt(prog_char_t const*, ...)
00000080 T __vector_25
00000080 T __vector_36
00000080 T __vector_54
00000086 t Log_Read_Raw()
00000086 t send_heartbeat(mavlink_channel_t)
00000088 t send_gps_status(mavlink_channel_t)
0000008a t report_sonar()
0000008c t setup_frame(unsigned char, Menu::arg const*)
0000008c t Log_Read_Mode()
0000008c t print_gyro_offsets()
0000008c t print_accel_offsets()
00000090 t Log_Write_Attitude()
00000090 t navigate()
00000092 t test_tuning(unsigned char, Menu::arg const*)
00000094 t init_optflow()
00000094 t Log_Read(int, int)
00000096 t send_radio_out(mavlink_channel_t)
00000096 t report_batt_monitor()
00000096 t print_wp(Location*, unsigned char)
00000096 B barometer
00000098 t init_arm_motors()
0000009a t send_radio_in(mavlink_channel_t)
0000009a t Log_Read_Motors()
0000009e t setup_mode(unsigned char, Menu::arg const*)
0000009e t Log_Write_Cmd(unsigned char, Location*)
0000009e t do_RTL()
000000a0 t Log_Read_Iterm()
000000a4 t print_flight_mode(unsigned char)
000000a4 T __vector_26
000000a4 T __vector_37
000000a4 T __vector_55
000000aa t Log_Write_PID(signed char, long, long, long, long, long, float)
000000ae t report_frame()
000000b0 t test_relay(unsigned char, Menu::arg const*)
000000b2 t setup_sonar(unsigned char, Menu::arg const*)
000000b2 t Log_Read_Performance()
000000b8 W AverageFilter<long, float, (unsigned char)4>::apply(long)
000000b8 W AverageFilter<long, float, (unsigned char)5>::apply(long)
000000ba t get_angle_boost(int)
000000be t update_events()
000000be t throttle_failsafe(unsigned int)
000000c0 t print_switch(unsigned char, unsigned char, bool)
000000c1 B compass
000000c2 t test_sonar(unsigned char, Menu::arg const*)
000000c2 t test_eedump(unsigned char, Menu::arg const*)
000000c2 t test_wp_nav(unsigned char, Menu::arg const*)
000000c2 t Log_Read_DMP()
000000c2 t send_raw_imu2(mavlink_channel_t)
000000c2 t setup_compass(unsigned char, Menu::arg const*)
000000c4 t send_ahrs(mavlink_channel_t)
000000c5 r setup_motors(unsigned char, Menu::arg const*)::__c
000000c6 W AverageFilter<long, float, (unsigned char)3>::apply(long)
000000c8 t send_attitude(mavlink_channel_t)
000000cc t Log_Read_Nav_Tuning()
000000cc t Log_Read_Control_Tuning()
000000d0 T update_toy_altitude()
000000d2 T limits_send_mavlink_status(mavlink_channel_t)
000000d2 t verify_land_baro()
000000d2 B motors
000000d4 t get_desired_speed(int, bool)
000000d6 t Log_Read_Attitude()
000000d8 T failsafe_check(unsigned long)
000000d8 t test_radio(unsigned char, Menu::arg const*)
000000d8 T GCS_MAVLINK::queued_param_send()
000000da T print_latlon(BetterStream*, long)
000000dc t read_radio()
000000dc t verify_land_sonar()
000000e4 t test_radio_pwm(unsigned char, Menu::arg const*)
000000e6 R GCS_MAVLINK::var_info
000000e8 t Log_Read_Current()
000000ee t Log_Read_Data()
000000f0 t report_tuning()
000000f0 r test_menu_commands
000000f0 W ModeFilter<int, (unsigned char)5>::apply(int)
000000f6 t Log_Read_Cmd()
00000100 t Log_Write_Optflow()
00000100 r setup_menu_commands
00000102 t Log_Read_PID()
0000010a t send_vfr_hud(mavlink_channel_t)
0000010e t update_optical_flow()
0000011c t get_cmd_with_index(int)
0000011c t test_baro(unsigned char, Menu::arg const*)
00000120 t arm_motors()
00000126 t Log_Read_Optflow()
0000012e t send_servo_out(mavlink_channel_t)
00000130 t report_compass()
00000136 t get_stabilize_roll(long)
00000136 t get_stabilize_pitch(long)
00000138 t test_logging(unsigned char, Menu::arg const*)
0000013c t verify_nav_wp()
00000142 T roll_flip()
00000146 t init_home()
00000148 t send_nav_controller_output(mavlink_channel_t)
0000014a t test_optflow(unsigned char, Menu::arg const*)
0000014c T set_recovery_home_alt()
0000014c t Log_Read_Process(int, int)
0000014c B ahrs
00000154 t mavlink_delay(unsigned long)
00000164 t set_cmd_with_index(Location, int)
00000168 t test_gps(unsigned char, Menu::arg const*)
0000016c t test_battery(unsigned char, Menu::arg const*)
0000016e t test_mag(unsigned char, Menu::arg const*)
00000172 T update_rate_contoller_targets()
00000178 t init_rc_out()
00000184 t mavlink_send_message(mavlink_channel_t, ap_message, unsigned int)
00000186 t select_logs(unsigned char, Menu::arg const*)
00000188 t Log_Read_GPS()
00000188 t get_stabilize_yaw(long)
00000190 t load_parameters()
00000196 t send_raw_imu3(mavlink_channel_t)
0000019a T GCS_MAVLINK::data_stream_send()
000001a8 t print_radio_values()
000001ac t send_raw_imu1(mavlink_channel_t)
000001bc T update_simple_mode()
000001c0 t get_yaw_rate_stabilized_ef(long)
000001c8 t setup_flightmodes(unsigned char, Menu::arg const*)
000001d0 T roll_pitch_toy()
000001d6 t dump_log(unsigned char, Menu::arg const*)
000001da t send_extended_status1(mavlink_channel_t, unsigned int)
000001dc t read_battery()
000001de t send_location(mavlink_channel_t)
000001e0 T update_yaw_mode()
000001e4 T GCS_MAVLINK::update()
000001e6 t get_throttle_rate(int)
000001ec t mavlink_try_send_message(mavlink_channel_t, ap_message, unsigned int)
000001f4 t calc_XY_velocity()
000001fc t get_rate_yaw(long)
0000021a t test_wp(unsigned char, Menu::arg const*)
00000224 t set_next_WP(Location*)
00000228 t setup_radio(unsigned char, Menu::arg const*)
00000278 t get_rate_roll(long)
00000278 t get_rate_pitch(long)
0000027e t setup_accel_scale(unsigned char, Menu::arg const*)
000002a8 t send_gps_raw(mavlink_channel_t)
000002f0 t get_of_pitch(long)
000002f6 t get_of_roll(long)
00000310 t update_altitude()
00000320 t update_GPS()
0000035a t calc_nav_rate(int)
00000368 t test_ins(unsigned char, Menu::arg const*)
0000037c b g
000003b2 t execute_nav_command()
000003e0 t set_mode(unsigned char)
00000424 t print_log_menu()
00000448 t update_nav_wp()
00000472 T update_throttle_mode()
000004f4 t calc_loiter(int, int)
00000510 t tuning()
00000648 t limits_loop()
00000662 t init_ardupilot()
00000913 R var_info
00000b14 T update_roll_pitch_mode()
00000f48 t __static_initialization_and_destruction_0(int, int)
0000184c T GCS_MAVLINK::handleMessage(__mavlink_message*)
000023d8 T loop
